{"gs.denik":"this.data.gamescribe.denik.push({\n  datum: new Date(),\n  zapis: `###`\n})","gs.f.nova":"const novaFirma = pracovniNazev => {\n  const id = this.data.gamescribe.firmy.reduce((id, firma) => id < firma.id ? firma.id : id, 0) + 1\n  this.data.gamescribe.firmy.push({\n    id,\n    pracovniNazev,\n    zamestnanci: [],\n    lokace_id: null,\n  })\n};\nnovaFirma(\"###\")","gs.l.dir":"this.data.gamescribe.lokace.filter(l => l.lokace_id === ###).map(l => ({\n  id: l.id,\n  nazev: l.nazev\n}))","gs.l.ndir":"this.data.gamescribe.lokace\n  .filter(l => l.lokace_id === 18)\n  .map(l => this.data.gamescribe.lokace\n    .filter(nl => nl.lokace_id === l.id)\n    .map(nl => `${nl.id}: ${l.nazev} - ${nl.nazev}`)\n  )\n","sm.u.novy":"const novyUkol = (ukol_id, nazev) => {\n  const id = this.data.selfManagement.ukoly.reduce((id, ukol) => id < ukol.id ? ukol.id : id, 0) + 1\n  this.data.selfManagement.ukoly.push({\n    id, ukol_id, nazev\n  })\n};\nnovyUkol(###)","sm.u.dir":"this.data.selfManagement.ukoly.filter(u => {\n  const ukol_id = parseInt(\"###\");\n  return u.hotovy !== true && (u.ukol_id === ukol_id || isNaN(ukol_id))\n});","gs.l.firma":"[###].forEach(id => this.data.gamescribe.lokace.find(l => l.id === id).firma = true)","gs.f.dir":"this.data.gamescribe.lokace.filter(l => l.firma).map(podnik => {\n  const dum = this.data.gamescribe.lokace.find(sl => sl.id === podnik.lokace_id);\n  return `${podnik.id}: ${dum.nazev} - ${podnik.nazev}`\n})\n","y.v.new":"const heslo = \"#?:\";\nthis.otevri(\"youtube\", heslo).then(data => {\n  const YVNew = (link, nazev, tagy) => {\n     const match = link.match(\/v=([^&]+)\/)\n     if (!match) {\n       throw \"Nepsr\u00e1vn\u00fd odkaz\"\n     }\n     data.videa.push({ nazev, id: match[1], tagy: tagy.split(\/,\\s*\/) });\n  };\n  YVNew(###);\n\n  const tagy = {};\n  for (const video of data.videa) {\n    if (video.tagy) {\n      for (const tag of video.tagy) {\n        if (!tagy[tag]) {\n          tagy[tag] = [];\n        }\n        tagy[tag].push(video);\n      }\n    }\n  }\n  tagy['Ostatn\u00ed'] = data.videa.filter(v => !v.tagy);\n  this.export(\"youtube\", tagy);\n  this.uloz(\"youtube\", heslo);\n})","y.v.dir":"this.data.youtube.videa.map((v, id) => ({ id, nazev: v.nazev, tagy: v.tagy?.join(\", \") }))",".e":"this.export(###)",".ls":"Object.keys(this.data)","gs.l.export":"this.export(\"gs-lokace\", this.data.gamescribe.lokace)","y.v.export":"const tagy = {};\nfor (const video of this.data.youtube.videa) {\n  if (video.tagy) {\n    for (const tag of video.tagy) {\n      if (!tagy[tag]) {\n        tagy[tag] = [];\n      }\n      tagy[tag].push(video);\n    }\n  }\n}\ntagy['Ostatn\u00ed'] = this.data.youtube.videa.filter(v => !v.tagy)\nthis.export(\"youtube\", tagy)","y.v.tag":"const addTag = (id, tag) => {\n  if (!this.data.youtube.videa[id].tagy) {\n    this.data.youtube.videa[id].tagy = [];\n  }\n  this.data.youtube.videa[id].tagy.push(tag);\n}; addTag(###);","y.v.find":"this.data.youtube.videa.map((v, index) => ({index, ...v})).filter(v => ###)\n","y.v.ex":"const tagy = {};\n  for (const video of this.data.youtube.videa) {\n    if (video.tagy) {\n      for (const tag of video.tagy) {\n        if (!tagy[tag]) {\n          tagy[tag] = [];\n        }\n        tagy[tag].push(video);\n      }\n    }\n  }\n  tagy['Ostatn\u00ed'] = this.data.youtube.videa.filter(v => !v.tagy);\n  this.export(\"youtube\", tagy);\n","mm.new":"const newNode = (parent_id, name) => {\n  const getAllNestedChildren = (node, nodes = []) => {\n    if (node.children) {\n      let result = node.children\n      for (const child of node.children) {\n        nodes = [...result, ...getAllNestedChildren(child, nodes)]\n      }\n    }\n    return nodes\n  };\n  const all = getAllNestedChildren(this.data.mm[0]);\n  const id = all.reduce((id, node) => id < node.id ? node.id : id, 0) + 1\n  const parent = all.find(node => node.id === parent_id)\n  if (!parent) {\n    throw `Uzel \u010d\u00edslo ${parent_id} neexistuje.`\n  }\n  if (!parent.children) {\n    parent.children = []\n  }\n  parent.children.push({ id, name })\n  return id\n};\n\nnewNode(###);","mm.newAll":"const newNode = (parent_id, names) => {\n  const getAllNestedChildren = (node, nodes = []) => {\n    if (node.children) {\n      let result = node.children\n      for (const child of node.children) {\n        nodes = [...result, ...getAllNestedChildren(child, nodes)]\n      }\n    }\n    return nodes\n  };\n  const all = getAllNestedChildren(this.data.mm[0]);\n  let id = all.reduce((id, node) => id < node.id ? node.id : id, 0) + 1\n  const parent = all.find(node => node.id === parent_id)\n  if (!parent) {\n    throw `Uzel \u010d\u00edslo ${parent_id} neexistuje.`\n  }\n  if (!parent.children) {\n    parent.children = []\n  }\n  for (const name of names) {\n    parent.children.push({ id: id++, name })\n  }\n  return --id\n};\n\nnewNode(###);","mm.get":"const newNode = (parent_id) => {\n  const getAllNestedChildren = (node, nest = 1, nodes = []) => {\n    node.nest = nest\n    if (node.children) {\n      for (const child of node.children) {\n        nodes = [...nodes, ...getAllNestedChildren(child, nest + 1, nodes)]\n      }\n    }\n    return nodes\n  };\n  console.log(JSON.parse(JSON.stringify(this.data.mm[0]))\n  let all = getAllNestedChildren(JSON.parse(JSON.stringify(this.data.mm[0])));\n  const parentNode = all.find(n => n.id === parent_id);\n  if (!parentNode) {\n    throw `Uzel s ID: ${parent_id} neexistuje`\n  }\n  const nest = parentNode.nest\n  all = getAllNestedChildren(parentNode);\n  const result = []\n  for (const node of all) {\n    let resultStr = \"\"\n    for (let i = nest; i < node.nest; i++) {\n      resultStr += \"-\"\n    }\n    result.push(`${resultStr} ${node.name}`)\n  }\n};\n\nnewNode(###);","f.new":"const newFunction = (path, code) => {\n  eval(`this.data.f.${path} = (code).toString()`);\n  return `${path} = ${code}`;\n};\nnewFunction(###);",".":"this.call(###)"}